#include <SPI.h>
#include <U8g2lib.h>

#define OLED_CS 10
#define OLED_DC 9
#define OLED_RESET 8
#define TRIG_PIN 5
#define ECHO_PIN 6
#define BUZZER_PIN 3

// 初始化 SH1106，128x64 像素，硬體 SPI
U8G2_SH1106_128X64_NONAME_F_4W_HW_SPI u8g2(U8G2_R0, OLED_CS, OLED_DC, OLED_RESET);
// 若 SH1106 不工作，嘗試 SSD1306（0.96 吋）
// U8G2_SSD1306_128X64_NONAME_F_4W_HW_SPI u8g2(U8G2_R0, OLED_CS, OLED_DC, OLED_RESET);

bool demo_mode = true; // 預設動畫模式
static const int max_animation_index = 8;
int current_animation_index = 0;
unsigned long lastDistanceCheck = 0;
unsigned long objectDetectedStart = 0;
bool objectDetected = false;
const unsigned long detectionThreshold = 10000; // 10 秒
const float distanceThreshold = 50.0; // 50 cm
bool buzzerActive = false;

int ref_eye_height = 40;
int ref_eye_width = 40;
int ref_space_between_eye = 10;
int ref_corner_radius = 10;

int left_eye_height = ref_eye_height;
int left_eye_width = ref_eye_width;
int left_eye_x = 32;
int left_eye_y = 32;
int right_eye_x = 32 + ref_eye_width + ref_space_between_eye;
int right_eye_y = 32;
int right_eye_height = ref_eye_height;
int right_eye_width = ref_eye_width;

void draw_eyes(bool update = true) {
  u8g2.clearBuffer();
  int x = int(left_eye_x - left_eye_width / 2);
  int y = int(left_eye_y - left_eye_height / 2);
  u8g2.drawRBox(x, y, left_eye_width, left_eye_height, ref_corner_radius);
  x = int(right_eye_x - right_eye_width / 2);
  y = int(right_eye_y - right_eye_height / 2);
  u8g2.drawRBox(x, y, right_eye_width, right_eye_height, ref_corner_radius);
  if (update) {
    u8g2.sendBuffer();
  }
}

void center_eyes(bool update = true) {
  left_eye_height = ref_eye_height;
  left_eye_width = ref_eye_width;
  right_eye_height = ref_eye_height;
  right_eye_width = ref_eye_width;
  left_eye_x = 128 / 2 - ref_eye_width / 2 - ref_space_between_eye / 2;
  left_eye_y = 64 / 2;
  right_eye_x = 128 / 2 + ref_eye_width / 2 + ref_space_between_eye / 2;
  right_eye_y = 64 / 2;
  draw_eyes(update);
}

void blink(int speed = 12) {
  draw_eyes();
  for (int i = 0; i < 3; i++) {
    left_eye_height -= speed;
    right_eye_height -= speed;
    draw_eyes();
    delay(1);
  }
  for (int i = 0; i < 3; i++) {
    left_eye_height += speed;
    right_eye_height += speed;
    draw_eyes();
    delay(1);
  }
}

void sleep() {
  left_eye_height = 2;
  right_eye_height = 2;
  draw_eyes(true);
}

void wakeup() {
  sleep();
  for (int h = 0; h <= ref_eye_height; h += 2) {
    left_eye_height = h;
    right_eye_height = h;
    draw_eyes(true);
  }
}

void happy_eye() {
  center_eyes(false);
  int offset = ref_eye_height / 2;
  for (int i = 0; i < 10; i++) {
    u8g2.clearBuffer();
    u8g2.drawRBox(left_eye_x - left_eye_width / 2, left_eye_y - left_eye_height / 2, 
                  left_eye_width, left_eye_height, ref_corner_radius);
    u8g2.drawRBox(right_eye_x - right_eye_width / 2, right_eye_y - right_eye_height / 2, 
                  right_eye_width, right_eye_height, ref_corner_radius);
    u8g2.setDrawColor(0);
    u8g2.drawTriangle(left_eye_x - left_eye_width / 2 - 1, left_eye_y + offset,
                      left_eye_x + left_eye_width / 2 + 1, left_eye_y + 5 + offset,
                      left_eye_x - left_eye_width / 2 - 1, left_eye_y + left_eye_height + offset);
    u8g2.drawTriangle(right_eye_x + right_eye_width / 2 + 1, right_eye_y + offset,
                      right_eye_x - right_eye_width / 2 - 1, right_eye_y + 5 + offset,
                      right_eye_x + right_eye_width / 2 + 1, right_eye_y + right_eye_height + offset);
    u8g2.setDrawColor(1);
    u8g2.sendBuffer();
    offset -= 2;
    delay(1);
  }
  u8g2.sendBuffer();
  delay(1000);
}

void saccade(int direction_x, int direction_y) {
  int direction_x_movement_amplitude = 8;
  int direction_y_movement_amplitude = 6;
  int blink_amplitude = 8;
  for (int i = 0; i < 1; i++) {
    left_eye_x += direction_x_movement_amplitude * direction_x;
    right_eye_x += direction_x_movement_amplitude * direction_x;
    left_eye_y += direction_y_movement_amplitude * direction_y;
    right_eye_y += direction_y_movement_amplitude * direction_y;
    right_eye_height -= blink_amplitude;
    left_eye_height -= blink_amplitude;
    draw_eyes();
    delay(1);
  }
  for (int i = 0; i < 1; i++) {
    left_eye_x += direction_x_movement_amplitude * direction_x;
    right_eye_x += direction_x_movement_amplitude * direction_x;
    left_eye_y += direction_y_movement_amplitude * direction_y;
    right_eye_y += direction_y_movement_amplitude * direction_y;
    right_eye_height += blink_amplitude;
    left_eye_height += blink_amplitude;
    draw_eyes();
    delay(1);
  }
}

void move_big_eye(int direction) {
  int direction_oversize = 1;
  int direction_movement_amplitude = 2;
  int blink_amplitude = 5;
  for (int i = 0; i < 3; i++) {
    left_eye_x += direction_movement_amplitude * direction;
    right_eye_x += direction_movement_amplitude * direction;
    right_eye_height -= blink_amplitude;
    left_eye_height -= blink_amplitude;
    if (direction > 0) {
      right_eye_height += direction_oversize;
      right_eye_width += direction_oversize;
    } else {
      left_eye_height += direction_oversize;
      left_eye_width += direction_oversize;
    }
    draw_eyes();
    delay(1);
  }
  for (int i = 0; i < 3; i++) {
    left_eye_x += direction_movement_amplitude * direction;
    right_eye_x += direction_movement_amplitude * direction;
    right_eye_height += blink_amplitude;
    left_eye_height += blink_amplitude;
    if (direction > 0) {
      right_eye_height += direction_oversize;
      right_eye_width += direction_oversize;
    } else {
      left_eye_height += direction_oversize;
      left_eye_width += direction_oversize;
    }
    draw_eyes();
    delay(1);
  }
  delay(1000);
  center_eyes();
}

void move_right_big_eye() {
  move_big_eye(1);
}

void move_left_big_eye() {
  move_big_eye(-1);
}

void launch_animation_with_index(int animation_index) {
  if (animation_index > max_animation_index) {
    animation_index = max_animation_index;
  }

  switch (animation_index) {
    case 0: wakeup(); break;
    case 1: center_eyes(true); break;
    case 2: move_right_big_eye(); break;
    case 3: move_left_big_eye(); break;
    case 4: blink(10); break;
    case 5: blink(20); break;
    case 6: happy_eye(); break;
    case 7: sleep(); break;
    case 8:
      center_eyes(true);
      for (int i = 0; i < 20; i++) {
        int dir_x = random(-1, 2);
        int dir_y = random(-1, 2);
        saccade(dir_x, dir_y);
        delay(1);
        saccade(-dir_x, -dir_y);
        delay(1);
      }
      break;
  }
}

void displayMessage(String message) {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_5x7_tf);
  u8g2.setCursor(0, 10);
  u8g2.print(message);
  u8g2.sendBuffer();
}

float getDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  float distance = duration * 0.034 / 2; // Distance in cm
  return distance;
}

void soundBuzzer() {
  tone(BUZZER_PIN, 1000, 1000); // 1000 Hz for 1 second
}

void setup() {
  Serial.begin(115200); // For debugging
  delay(100); // Ensure serial stabilizes
  Serial.println("Setup complete"); // Debug
  u8g2.begin();
  u8g2.setContrast(80);
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0, 10, "Intellar.ca");
  u8g2.sendBuffer();
  delay(2000);
  center_eyes(true); // Initial eye animation
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
}

void loop() {
  // Check distance sensor every second
  if (millis() - lastDistanceCheck >= 1000) {
    float distance = getDistance();
    Serial.print("Distance: "); // Debug
    Serial.println(distance);
    if (distance < distanceThreshold && distance > 0) {
      if (!objectDetected) {
        objectDetected = true;
        objectDetectedStart = millis();
      } else if (millis() - objectDetectedStart >= detectionThreshold && !buzzerActive) {
        demo_mode = false; // Stop animations
        displayMessage("REST");
        soundBuzzer();
        buzzerActive = true; // Mark buzzer as active
        Serial.println("REST displayed, buzzer sounded"); // Debug
        objectDetectedStart = millis(); // Reset timer for next trigger
      }
    } else {
      if (objectDetected) {
        objectDetected = false;
        buzzerActive = false; // Reset buzzer state
        demo_mode = true; // Resume animations
        Serial.println("Object removed, resuming animations"); // Debug
      }
    }
    lastDistanceCheck = millis();
  }

  // Run animations if in demo mode
  if (demo_mode && !buzzerActive) {
    launch_animation_with_index(current_animation_index++);
    if (current_animation_index > max_animation_index) {
      current_animation_index = 0;
    }
    delay(100); // Control animation speed
  }
}
